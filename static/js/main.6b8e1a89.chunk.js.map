{"version":3,"sources":["InfoBox.js","utill.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","redius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLine","trick","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b8e1a89.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport \"./infoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} \r\n            ${ isRed && \"infoBox--red\" }`}>\r\n            <CardContent>\r\n                {/* Title CoronaVirus cases */}\r\n                <Typography className=\"infoBox__Title\" color=\"textSecondary\">{title}</Typography>\r\n\r\n                {/* +120 number of cases */}\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n                {/* 1.2M Total */}\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","\r\nimport React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: '#CC1034',\r\n        multiplier: 400,\r\n    },\r\n    recovered: {\r\n        hex: '#7dd71d',\r\n        multiplier: 600,\r\n    },\r\n    deaths: {\r\n        hex: '#fb4443',\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\nstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") => \r\n\r\n      data.map((country) => (\r\n        <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        fillOpacity={0.4}\r\n        radius={\r\n          Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n        }\r\n      >  \r\n               <Popup>\r\n                     <div className=\"info-container\">\r\n                         <div \r\n                             className=\"info-flag\"\r\n                              style={{backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                         />\r\n                         <div className=\"info-name\">\r\n                              {country.country} \r\n                         </div>\r\n                         <div className=\"info-confirmed\">\r\n                              Cases: {numeral(country.cases).format(\"0,0\")}\r\n                         </div>\r\n                         <div className=\"info-recovered\">\r\n                              Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                         </div>\r\n                         <div className=\"info-deaths\">\r\n                              Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                         </div>\r\n                     </div>\r\n               </Popup>\r\n                \r\n           </Circle>\r\n      ));","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './utill';\r\n\r\nfunction Map({ countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer \r\n                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {/* Loop though all counties */}\r\n            {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react'\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            redius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0, 0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLine: {\r\n                    display: false,\r\n                },\r\n                trick: {\r\n                    //Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    }\r\n}\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n    const [data, setData] = useState({});\r\n\r\n    // https://disease.sh/v3/covid-19/historical/all?lastdays=30\r\n\r\n    const buildChartData = (data, casesType='cases') => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n\r\n        for (let date in data.cases)  {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint\r\n                }\r\n               chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n\r\n        };\r\n        return chartData;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => {\r\n                return response.json();\r\n              })\r\n              .then((data) => {\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n                console.log(chartData);\r\n            });\r\n        }\r\n\r\n        fetchData();\r\n       \r\n    },[casesType]);\r\n\r\n    \r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                  <Line data={{\r\n                    datasets: [\r\n                        {\r\n                            backgroundColor: \"red\",\r\n                            borderColor: \"#CCC\",\r\n                            data:data,\r\n                        },\r\n                    ],\r\n                }} options={options} />\r\n            )}\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph; \r\n","import { \n  FormControl, \n  Select, \n  MenuItem,\n  Card,\n  CardContent\n} from '@material-ui/core';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport React, { useState, useEffect } from 'react';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './utill';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n//  State = This is how to write varibles in react <<<<<<<<\n  const [countries, setCountries] = useState([]); \n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(() => {\n     fetch(\"https://disease.sh/v3/covid-19/all\").then(response => response.json()).then(data => {\n        setCountryInfo(data);\n     });\n\n  }, [])\n\n  // https://disease.sh/v3/covid-19/countries\n\n  // UseEffect runs a pice of code\n  // based on a given condition\n\n  useEffect(() => {\n    //  The code inside here will run once\n    // when the component loads and not again\n    // async - send a request\n\n    const getCountriesData = async () => {\n       await fetch(\"https://disease.sh/v3/covid-19/countries\").then((response) => \n       response.json()).then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country, //UGANDA\n              value: country.countryInfo.iso2 //UG, KY, USA \n            }));\n              \n            const sortedData = sortData(data);\n              setTableData(sortedData);\n              setMapCountries(data);\n              setCountries(countries);\n       });\n    };\n       \n       getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n     const countryCode = event.target.value;\n\n     const url = \n         countryCode === \"worldwide\"\n         ? \"https://disease.sh/v3/covid-19/all\"\n         : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n         await fetch(url).then((response) => response.json()).then((data) => {\n           setCountry(countryCode);\n            setCountryInfo(data);\n\n            setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n            setMapZoom(4);\n         });\n\n  }\n  console.log(\"Country Info >>>>\", countryInfo);\n       \n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n          <div className=\"app__header\">\n              {/* Header */}\n            <h1>COVID-19 TRACKER</h1>\n                <FormControl className=\"app_dropdown\">\n                    <Select variant=\"outlined\" onChange={onCountryChange} value={country} >\n                      <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\n    {/* Loop though all the counties and show a dropdown list of the options */}\n                      {\n                        countries.map((country) => (\n                          <MenuItem value={country.value}>{country.name}</MenuItem>\n                        ))}\n\n                      {/* <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                      <MenuItem value=\"worldwide\">Option 1</MenuItem>\n                      <MenuItem value=\"worldwide\">Option 2</MenuItem>\n                      <MenuItem value=\"worldwide\">YooooooO!!</MenuItem>    */}\n\n                    </Select>\n                </FormControl>\n            </div>\n          {/* End of Header */}\n\n          <div className=\"app__stats\">\n            <InfoBox\n                isRed\n                active={casesType === \"cases\"}\n                onClick={e => setCasesType('cases')} \n                title=\"Coronavirus Cases\" \n                cases={prettyPrintStat(countryInfo.todayCases)} \n                total={prettyPrintStat(countryInfo.cases)} />\n\n            <InfoBox\n                active={casesType === \"recovered\"}\n                onClick={e => setCasesType('recovered')}\n                title=\"Recovered\" \n                cases={prettyPrintStat(countryInfo.todayRecovered)} \n                total={prettyPrintStat(countryInfo.recovered)} />\n\n            <InfoBox\n                isRed\n                active={casesType === \"deaths\"}\n                onClick={e => setCasesType('deaths')}\n                title=\"Deaths\"  \n                cases={prettyPrintStat(countryInfo.todayDeaths)}   \n                total={prettyPrintStat(countryInfo.deaths)}/>\n\n                  {/* InfoBoxs title=\"Coronavirus cases\" */}\n                  {/* InfoBoxs title=\"Coronavirus recoveries\" */}\n                  {/* InfoBoxs title=\"Coronavirus Deaths\"*/}\n          </div>\n\n          \n\n\n           \n\n            {/* Map */}\n            <Map\n               casesType={casesType} \n               countries={mapCountries} \n               center={mapCenter} \n               zoom={mapZoom} />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n\n          <h3>Live Cases by Country</h3>\n            {/* Table */}\n            <Table countries={tableData} />\n            <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType} />\n           \n        </CardContent>\n            \n      </Card>\n     \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}